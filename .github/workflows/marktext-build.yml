# 编译marktext develop分支
name: marktext-build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
        # 拉取仓库
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: marktext/marktext
          ref: develop

        # 安装 node.js
      - name: Install node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true
          cache: yarn
          cache-dependency-path: yarn.lock

        # 修复 node-gyp
      - name: Fix node-gyp
        run: |
          npm install --global node-gyp@latest
          npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}
          node-gyp install
        shell: pwsh

        # 缓存 node_modules
      - name: Cache node_modules
        uses: actions/cache@v2
        id: cacheNodeModules
        with:
          path: ${{ github.workspace }}\node_modules
          key: ${{ runner.os }}-node_modules-cache-v1-${{ hashFiles(format('{0}{1}', github.workspace, '\yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-node_modules-cache-v1-

        # 缓存 Electron
      - name: Cache Electron
        uses: actions/cache@v2
        with:
          path: ${{ env.LOCALAPPDATA }}\electron\Cache
          key: ${{ runner.os }}-electron-cache-${{ hashFiles(format('{0}{1}', github.workspace, '\yarn.lock')) }}

        # 缓存 Electron-Builder
      - name: Cache Electron-Builder
        uses: actions/cache@v2
        with:
          path: ${{ env.LOCALAPPDATA }}\electron-builder\cache
          key: ${{ runner.os }}-electron-builder-cache-${{ hashFiles(format('{0}{1}', github.workspace, '\yarn.lock')) }}

        # 安装依赖
      - name: Install dependencies
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: yarn install --check-files --frozen-lockfile

        # 构建
      - name: Build
        run: |
          yarn build:bin
          tree ${{ github.workspace }}\build

      #   # 设置版本号
      # - name: Set version
      #   id: version
      #   run: |
      #     apt install -y jq
      #     echo "::set-output name=version::$(jq .version package.json | sed -r 's/"(.*)"/\1-ec/g')"

      #   # 发布
      # - name: Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     tag: marktext-v${{steps.version.outputs.version}}
      #     name: marktext-v${{steps.version.outputs.version}}
      #     body: Github Action auto build.
      #     artifacts: output/
      #     token: ${{ secrets.GITHUB_TOKEN }}
